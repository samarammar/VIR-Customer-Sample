package com.accuragroup.eg.Vir.models.Entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CART_PRODUCTS".
*/
public class CartProductsDao extends AbstractDao<CartProducts, Long> {

    public static final String TABLENAME = "CART_PRODUCTS";

    /**
     * Properties of entity CartProducts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Img = new Property(1, String.class, "img", false, "IMG");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property Quantity = new Property(4, int.class, "quantity", false, "QUANTITY");
        public final static Property Total = new Property(5, String.class, "total", false, "TOTAL");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
    }


    public CartProductsDao(DaoConfig config) {
        super(config);
    }
    
    public CartProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CART_PRODUCTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"IMG\" TEXT," + // 1: img
                "\"TITLE\" TEXT," + // 2: title
                "\"PRICE\" INTEGER NOT NULL ," + // 3: price
                "\"QUANTITY\" INTEGER NOT NULL ," + // 4: quantity
                "\"TOTAL\" TEXT," + // 5: total
                "\"CATEGORY\" TEXT);"); // 6: category
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CART_PRODUCTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CartProducts entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getPrice());
        stmt.bindLong(5, entity.getQuantity());
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(6, total);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CartProducts entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(2, img);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getPrice());
        stmt.bindLong(5, entity.getQuantity());
 
        String total = entity.getTotal();
        if (total != null) {
            stmt.bindString(6, total);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CartProducts readEntity(Cursor cursor, int offset) {
        CartProducts entity = new CartProducts( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // img
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // price
            cursor.getInt(offset + 4), // quantity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // total
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // category
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CartProducts entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setQuantity(cursor.getInt(offset + 4));
        entity.setTotal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CartProducts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CartProducts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CartProducts entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
